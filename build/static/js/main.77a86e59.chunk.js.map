{"version":3,"sources":["topics/welcome/welcome.js","topics/git/git.js","topics/codingStyle/codingStyle.js","topics/codeReview/codeReview.js","topics/welcome/thankYou.js","App.js","reportWebVitals.js","index.js"],"names":["Welcome","props","GitSegment","data-id","className","data-trim","data-line-numbers","dangerouslySetInnerHTML","__html","WhyCodingStyle","autoAnimate","itemID","fragment","fragmentIndex","width","src","href","WhatCodingStyle","WhatHelps","CodingStyle","Intro","GithubIntro","CodeReview","ThankYou","App","useEffect","height","plugins","HighlightPlugin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77a86e59.chunk.js","sourcesContent":["import { Slide, H1, H5 } from '@gregcello/revealjs-react'\r\nimport React from 'react'\r\n\r\nexport default function Welcome (props) {\r\n  return (\r\n    <Slide>\r\n      <H1>Git, Code Style and Code Review</H1>\r\n      <H5>Yufan Yuan | Orka</H5>\r\n    </Slide>\r\n  )\r\n}\r\n","import { H1, Slide } from '@gregcello/revealjs-react'\r\nimport React from 'react'\r\n\r\nconst GitSegment = () => {\r\n  return (\r\n    <>\r\n      <Slide>\r\n        <H1>Easy git</H1>\r\n        <pre data-id='Indent'>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n              # get latest code\r\n              git pull\r\n              # create a new branch and start working on it\r\n              git checkout -b [BranchName]\r\n              # save all changes\r\n              git add .\r\n              # commit your codes\r\n              git commit -m \"commit message\"\r\n              # push it to the server\r\n              git push\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GitSegment\r\n","import { H1, Image, Li, Slide, Span, Ol, P } from '@gregcello/revealjs-react'\r\nimport React from 'react'\r\nimport './codingStyle.css'\r\n\r\nconst WhyCodingStyle = () => {\r\n  return (\r\n    <>\r\n      <Slide autoAnimate>\r\n        <H1 itemID='header'><Span fragment fragmentIndex={0}>Why do</Span> we need Code Style<Span fragment fragmentIndex={0}>?</Span></H1>\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1 itemID='header'><Span>Why do</Span> we need Code Style<Span>?</Span></H1>\r\n        <Image width='80%' src='shittyCode.png' />\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1 itemID='header'><Span>Why do</Span> we need Code Style<Span>?</Span></H1>\r\n        <div className='coding-style-list-container'>\r\n          <Ol className='coding-style-list'>\r\n            <Li>\r\n              <a href='https://paperswithcode.com/'>https://paperswithcode.com/</a> and <a href='https://paperswithoutcode.com/'>https://paperswithoutcode.com/</a>\r\n            </Li>\r\n            <Li>\r\n              much easier debuging\r\n            </Li>\r\n          </Ol>\r\n        </div>\r\n      </Slide>\r\n    </>\r\n  )\r\n}\r\n\r\nconst WhatCodingStyle = () => {\r\n  return (\r\n    <>\r\n      <Slide>\r\n        <H1>Code Style PEP8 - Indent & Whitespace</H1>\r\n        <pre>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html:\r\n`\r\n# Use four whitespaces\r\ndef fool(*args, **kwargs):\r\n    pass # four whitespaces\r\n\\tpass # tab\r\n`\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide>\r\n        <H1>Code Style PEP8 - Indent & Whitespace</H1>\r\n        <pre data-id='Indent'>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n# Always surround these binary operators with a single space on \r\n# either side:assignment (=), augmented assignment (+=, -= etc.),\r\n# comparisons (==, <, >, !=, <>, <=, >=, in, not in, is, is not), \r\n# Booleans (and, or, not).\r\nsubmitted += 1            # Correct\r\nsubmitted +=1             # Wrong\r\n\r\n# consider adding whitespace around the operators with the lowest\r\n# priority(ies)\r\nhypot2 = x*x + y*y        # Correct\r\nhypot2 = x * x + y * y    # Wrong\r\n\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide>\r\n        <H1>Code Style PEP8 - naming</H1>\r\n        <pre data-id='Indent'>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n# Types and Classes naming: UpperCamelCase\r\nclass NewClass:\r\n    def __init__(self):\r\n        self.instance_variable = 1\r\n\r\n# Functions and Variables naming: snake_case\r\nvariable_one = 'Hello, World!'\r\n\r\n# Constants naming: \r\nI_DON_T_KNOW_HOW_TO_EXPLAIN_IT = 'example'\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide>\r\n        <H1>Code Style PEP8 - Imports</H1>\r\n        <div className='coding-style-import-container'>\r\n          <P>\r\n            imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.\r\n          </P>\r\n          <P>Imports should be grouped in the following order:</P>\r\n          <Ol>\r\n            <Li>Standard library imports.</Li>\r\n            <Li>Related third party imports.</Li>\r\n            <Li>Local application/library specific imports.</Li>\r\n          </Ol>\r\n          <P>You should put a blank line between each group of imports.</P>\r\n          <P>--PEP8</P>\r\n        </div>\r\n      </Slide>\r\n    </>\r\n  )\r\n}\r\n\r\nconst WhatHelps = () => {\r\n  return (\r\n    <Slide>\r\n      <H1>pylint can be very helpful</H1>\r\n    </Slide>\r\n  )\r\n}\r\n\r\nconst CodingStyle = () => {\r\n  return (\r\n    <>\r\n      <WhyCodingStyle />\r\n      <WhatCodingStyle />\r\n      <WhatHelps />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CodingStyle\r\n","import { Slide, H1, P, Image } from '@gregcello/revealjs-react'\r\nimport React from 'react'\r\n\r\nconst Intro = () => {\r\n  return (\r\n    <Slide>\r\n      <H1>Code Review</H1>\r\n      <Image src='tooLongCodeReview.jpg' />\r\n    </Slide>\r\n  )\r\n}\r\n\r\nconst GithubIntro = () => {\r\n  return (\r\n    <>\r\n      <Slide autoAnimate>\r\n        <H1>Using Github - Setting up ssh</H1>\r\n        <P>\r\n          <a href='https://devconnected.com/how-to-setup-ssh-keys-on-github/'>This tutorial</a> is a complete tutorial for setting up git over ssh.\r\n          If you found it difficult to connect the github's server, you can add more lines into the config file introduced in\r\n          <a href='https://devconnected.com/how-to-setup-ssh-keys-on-github/#Configure_your_SSH_keys'> this part.</a>\r\n        </P>\r\n        <pre>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n              Host github.com\r\n                Hostname github.com\r\n                User git\r\n                IdentityFile ~/.ssh/custom_id_rsa\r\n                # ProxySettings:\r\n                # if you are using mac or linux, use nc.\r\n                # if you are using windows, plz find out\r\n                # where your git is installed. There should\r\n                # always be a 'connect.exe' in git's\r\n                # installation directory. e.g. my connect.exe\r\n                # path is C:\\\\Program Files\\\\Git\\\\mingw64\\\\bin\\\\connect.exe\r\n                # my git install path is C:\\\\Program Files\\\\Git\r\n                # E.g. mac/linux proxy command\r\n                ProxyCommand $(which nc) -X 5 -x 127.0.0.1:1080 %h %p\r\n                # E.g. Windows proxy command\r\n                ProxyCommand C:\\\\Program Files\\\\Git\\\\mingw64\\\\bin\\\\connect.exe -S 127.0.0.1:1080 %h %p\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create new Repo</H1>\r\n        <P>Simply create a new Repo, DO NOT FORGET MAKING IT PRIVATE</P>\r\n        <Image src='createRepo.png' />\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create new Repo</H1>\r\n        <P>\r\n          copy the git repo url\r\n        </P>\r\n        <Image width='90%' src='brandNewRepo.png' />\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create new Repo</H1>\r\n        <P>type the following command to upload your current code to the repository</P>\r\n        <pre>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n              cd [your_project_directory]\r\n              git init\r\n              git remote add origin [your_git_repo_url]\r\n              git add .\r\n              git commit -m \"init commit\"\r\n              git push --set-upstream origin master\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create pull request</H1>\r\n        <P>After you finish pulling code from github, the first thing you should do is create and checkout to your own branch</P>\r\n        <pre data-id='Indent'>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n# git checkout -b [branch-name]\r\ngit checkout -b yufanDev\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create pull request</H1>\r\n        <P>You are now working on your branch.</P>\r\n        <P>After a bunch of works you may want to push your code to github and find someone to review your code. the first thing you should do is making a commit</P>\r\n        <pre data-id='Indent'>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n# let git know all your changes\r\ngit add .\r\n# pack all these changes into a single commit and give this commit a proper description\r\ngit commit -m \"added balabala | fixed balabala | removed balabala\"\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create pull request</H1>\r\n        <P>you can now create a pull request</P><span> with github-cli</span>\r\n        <P>I would strongly recommand learning github-cli. This will save you a lot of time.</P>\r\n        <pre data-id='Indent'>\r\n          <code\r\n            className='coding-style-code'\r\n            data-trim\r\n            data-line-numbers\r\n            dangerouslySetInnerHTML={{\r\n              __html: `\r\n# simply type this command and then follow the instructions from github-cli\r\ngh pr create --base master\r\n              `\r\n            }}\r\n          />\r\n        </pre>\r\n      </Slide>\r\n      <Slide autoAnimate>\r\n        <H1>Github - create pull request</H1>\r\n        <P>you can now create a pull request</P><span> with website</span>\r\n        <Image width='100%' src='createPullRequest.png' />\r\n      </Slide>\r\n    </>\r\n  )\r\n}\r\n\r\nconst CodeReview = () => {\r\n  return (\r\n    <>\r\n      <Intro />\r\n      <GithubIntro />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CodeReview\r\n","import { Slide, H1 } from '@gregcello/revealjs-react'\r\nimport React from 'react'\r\n\r\nconst ThankYou = () => {\r\n  return (\r\n    <Slide>\r\n      <H1>Thank You.</H1>\r\n    </Slide>\r\n  )\r\n}\r\n\r\nexport default ThankYou\r\n","import './App.css'\r\nimport { RevealJS, HighlightPlugin } from '@gregcello/revealjs-react'\r\n\r\nimport Welcome from './topics/welcome/welcome'\r\nimport GitSegment from './topics/git/git'\r\nimport CodingStyle from './topics/codingStyle/codingStyle'\r\nimport { useEffect } from 'react'\r\nimport CodeReview from './topics/codeReview/codeReview'\r\nimport ThankYou from './topics/welcome/thankYou'\r\n\r\nfunction App () {\r\n  useEffect(() => {\r\n\r\n  }, [])\r\n  return (\r\n    <div className='App'>\r\n      <RevealJS\r\n        width={1280}\r\n        height={960}\r\n        plugins={[HighlightPlugin]}\r\n      >\r\n        <Welcome />\r\n        <CodingStyle />\r\n        <GitSegment />\r\n        <CodeReview />\r\n        <ThankYou />\r\n      </RevealJS>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}